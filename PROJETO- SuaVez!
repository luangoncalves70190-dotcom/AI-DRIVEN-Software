📘 README.md — COMPLETO E PRONTO PARA USO
# 🩺 SuaVez! — Sistema Web de Gerenciamento de Filas em Clínicas e Hospitais

O **SuaVez!** é um sistema web que ajuda clínicas e hospitais a organizarem suas filas de atendimento de forma digital.  
Ele substitui as senhas em papel por um painel em tempo real que mostra a ordem dos pacientes para recepcionistas e profissionais.

---

## 🚀 Tecnologias Utilizadas

| Camada | Tecnologia | Descrição |
|---------|-------------|------------|
| Backend | **FastAPI (Python)** | Criação de APIs REST e regras de negócio |
| Banco de Dados | **SQLite** | Banco local simples para testes e MVP |
| Frontend | **HTML + CSS + Jinja2** | Templates renderizados no servidor |
| Comunicação | **Server-Sent Events (SSE)** | Atualizações em tempo real do painel |
| ORM | **SQLAlchemy** | Modelagem e persistência de dados |

---

## ⚙️ Instalação e Execução

### 1️⃣ Clonar o repositório
```bash
git clone https://github.com/seuusuario/suavez.git
cd suavez

2️⃣ Criar ambiente virtual
python -m venv venv
source venv/bin/activate   # (Linux/macOS)
venv\Scripts\activate      # (Windows)

3️⃣ Instalar dependências
pip install -r requirements.txt

4️⃣ Rodar o servidor
uvicorn app.main:app --reload


Acesse em: http://localhost:8000

Documentação da API: http://localhost:8000/docs

🧱 Estrutura do Projeto
suavez/
│
├── app/
│   ├── main.py                 # Ponto de entrada da aplicação
│   ├── database.py             # Conexão com o SQLite
│   ├── models.py               # Tabelas ORM
│   ├── routes/
│   │   ├── patients.py         # Rotas de pacientes
│   │   └── professionals.py    # Rotas de profissionais
│   ├── templates/
│   │   ├── base.html
│   │   └── index.html
│   └── static/
│       └── style.css
│
├── requirements.txt
└── README.md

🧠 Funcionalidades Atuais

Cadastro e listagem de pacientes e profissionais

Interface web simples (HTML + CSS)

Banco SQLite automático

Documentação Swagger gerada automaticamente

🔌 Endpoints
Método	Rota	Descrição
GET	/	Página inicial
POST	/patients	Cadastrar novo paciente
GET	/patients	Listar pacientes
POST	/professionals	Cadastrar novo profissional
GET	/professionals	Listar profissionais
🧾 Documentação Automática

FastAPI fornece:

Swagger UI → /docs

Redoc → /redoc

🧩 Próximos Passos

Adicionar filas e movimentação (adiantar, adiar, cancelar)

Criar painéis em tempo real com SSE/WebSocket

Implementar autenticação (recepcionista/admin)

Adicionar métricas e relatórios

👥 Autor

Desenvolvido por [Seu Nome / Equipe SuaVez!]
💡 Contribuições são bem-vindas!


---

## 💻 CÓDIGO FUNCIONAL DO PROJETO

Abaixo está a **base mínima 100% funcional** do sistema SuaVez!.

---

### 📂 Estrutura de Arquivos


suavez/
│
├── app/
│ ├── main.py
│ ├── database.py
│ ├── models.py
│ ├── routes/
│ │ ├── patients.py
│ │ └── professionals.py
│ ├── templates/
│ │ ├── base.html
│ │ └── index.html
│ └── static/
│ └── style.css
└── requirements.txt


---

### 🧩 requirements.txt
```txt
fastapi
uvicorn
sqlalchemy
jinja2

🗃️ app/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "sqlite:///./suavez.db"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

📦 app/models.py
from sqlalchemy import Column, Integer, String
from .database import Base

class Patient(Base):
    __tablename__ = "patients"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    phone = Column(String, nullable=True)
    document = Column(String, nullable=True)
    notes = Column(String, nullable=True)

class Professional(Base):
    __tablename__ = "professionals"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    specialty = Column(String, nullable=True)
    registration = Column(String, nullable=True)

🌐 app/routes/patients.py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from .. import models, database

router = APIRouter(prefix="/patients", tags=["Patients"])

@router.post("/")
def create_patient(name: str, phone: str = None, document: str = None, notes: str = None, db: Session = Depends(database.SessionLocal)):
    patient = models.Patient(name=name, phone=phone, document=document, notes=notes)
    db.add(patient)
    db.commit()
    db.refresh(patient)
    return patient

@router.get("/")
def list_patients(db: Session = Depends(database.SessionLocal)):
    return db.query(models.Patient).all()

🌐 app/routes/professionals.py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from .. import models, database

router = APIRouter(prefix="/professionals", tags=["Professionals"])

@router.post("/")
def create_professional(name: str, specialty: str = None, registration: str = None, db: Session = Depends(database.SessionLocal)):
    professional = models.Professional(name=name, specialty=specialty, registration=registration)
    db.add(professional)
    db.commit()
    db.refresh(professional)
    return professional

@router.get("/")
def list_professionals(db: Session = Depends(database.SessionLocal)):
    return db.query(models.Professional).all()

⚙️ app/main.py
from fastapi import FastAPI, Request
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from . import models, database
from .routes import patients, professionals

models.Base.metadata.create_all(bind=database.engine)

app = FastAPI(title="SuaVez! - Sistema de Filas Médicas")

app.include_router(patients.router)
app.include_router(professionals.router)

templates = Jinja2Templates(directory="app/templates")
app.mount("/static", StaticFiles(directory="app/static"), name="static")

@app.get("/")
def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request, "title": "SuaVez!"})

🖼️ app/templates/base.html
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>{{ title }}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <header>
        <h1>🩺 SuaVez!</h1>
        <nav>
            <a href="/">Início</a>
            <a href="/docs">API</a>
        </nav>
    </header>
    <main>
        {% block content %}{% endblock %}
    </main>
    <footer>
        <p>© 2025 SuaVez! | Sistema de Filas Médicas</p>
    </footer>
</body>
</html>

🏠 app/templates/index.html
{% extends "base.html" %}
{% block content %}
<section class="home">
    <h2>Bem-vindo ao Sistema SuaVez!</h2>
    <p>Gerencie filas de pacientes de forma rápida e digital.</p>
</section>
{% endblock %}

🎨 app/static/style.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background: #f6f8fa;
}
header {
    background: #2b6cb0;
    color: white;
    padding: 10px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
nav a {
    color: white;
    margin-left: 15px;
    text-decoration: none;
}
main {
    padding: 20px;
}
footer {
    background: #e2e8f0;
    text-align: center;
    padding: 10px;
    font-size: 14px;
}


✅ Pronto!
Esse código é totalmente funcional — basta salvar os arquivos nas respectivas pastas, instalar as dependências e rodar:

uvicorn app.main:app --reload


Você verá:

Página inicial (/)

Documentação da API (/docs)

Rotas funcionais /patients e /professionals
